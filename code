//linear search
#include <iostream>
#include <cstdlib>
#include <ctime>
#include <chrono>
using namespace std;

int linearSearch(int arr[], int n, int key){
    for (int i=0;i<n;i++){
        if (arr[i]==key){
            return i;
        }
    }
    return -1;
}

int main(){
    const int size = 100;
    int arr[size];
    int key;

    srand(static_cast<unsigned int>(time(0)));

    for (int i = 0; i < size; i++) {
        arr[i] = rand() % 1000; 
    }

    cout<<"Array : ";
    for (int i=0;i<size;i++){
        cout<<arr[i]<<" ";
    }
    cout<<endl;

    cout << "Enter the element to search: ";
    cin >> key;

    auto start = chrono::high_resolution_clock::now();

    int result = linearSearch(arr, size, key);

    auto end = chrono::high_resolution_clock::now();
    auto duration = chrono::duration_cast<chrono::microseconds>(end - start).count();

    if (result == -1) {
        cout << "Element not found in array" << endl;
    }
    else{
        cout << "Element found at index " << result << endl;
    }

    cout << "Time taken to search: " << duration << " microseconds" << endl;

    return 0;

}




//binarySearch
#include <iostream>
#include <cstdlib>
#include <ctime>
#include <chrono>
#include <algorithm>
using namespace std;

int binarySearch(int arr[], int n, int val){
    int left=0;
    int right=n-1;
    while(left<=right){
        int mid=(left+right)/2;
        if(arr[mid]==val){
            return mid;
        }
        else if(arr[mid]>val){
            right=mid-1;
        }
        else{
            left=mid+1;
        }
    }
    return -1;
}

int main(){
    
    const int size = 100;
    int arr[size];
    int key;

    srand(static_cast<unsigned int>(time(0)));

    for (int i = 0; i < size; i++) {
        arr[i] = rand() % 100; 
    }

    sort(arr, arr + size);


    cout<<"Array : ";
    for (int i=0;i<size;i++){
        cout<<arr[i]<<" ";
    }
    cout<<endl;

    cout << "Enter the element to search: ";
    cin >> key;

    auto start = chrono::high_resolution_clock::now();
    
    int result = binarySearch(arr, size, key);

    auto end = chrono::high_resolution_clock::now();
    auto duration = chrono::duration_cast<chrono::microseconds>(end - start).count();

    if (result == -1) {
        cout << "Element not found in array" << endl;
    }
    else{
        cout << "Element found at index " << result << endl;
    }

    cout << "Time taken to search: " << duration << " microseconds" << endl;

    return 0;

}


//mergesort
// Online C++ compiler to run C++ program online
#include <iostream>
using namespace std;

void printarr(int arr[], int size){
    for(int i = 0; i<size; i++){
        cout<<arr[i]<<" ";
    }
    cout<<endl;
}

void merge(int arr[], int left, int right, int mid, int size){
    int n1= mid - left + 1;
    int n2= right - mid;
    
    int arr1[n1], arr2[n2];
    
    for(int i=0;i<n1; i++)
        arr1[i] = arr[left + i];
    for(int j=0;j<n2;j++)
        arr2[j] = arr[mid+1+j];
    
    int i=0;
    int j=0;
    int k=left;
    
    while(i<n1 && j<n2){
        if(arr1[i]<=arr2[j]){
            arr[k]=arr1[i];
            i++;
        }
        else{
            arr[k]=arr2[j];
            j++;
        }
        k++;
    }
    
    while(i < n1){
        arr[k]=arr1[i];
        i++;
        k++;
    }
    
    while(j < n2){
        arr[k]=arr2[j];
        j++;
        k++;
    }
    
    printarr(arr, size);
    
}



void mergeSort(int arr[], int left, int right, int size){
    if(left<right){
        int mid = left + (right-left)/2;
        
        mergeSort(arr, left, mid, size);
        mergeSort(arr, mid+1, right, size);
        
        merge(arr, left, right, mid, size);
    }
}



int main() {
    int size;
    cout<<"Enter the size of array : ";
    cin>>size;
    int arr[size];
    cout<<"Enter elements : ";
    for(int i=0; i<size; i++){
        cin>>arr[i];
    }
    mergeSort(arr, 0, size-1, size);
    printarr(arr, size);
    return 0;
}


//quick sort
//1st element as pivot

#include <iostream>
using namespace std;

int partition(int arr[], int low, int high){
    int i = low;
    int j = high;
    int pivot = arr[low];
    while(i<j){
        while(arr[i]<=pivot && i<high){
            i++;
        }
        while(arr[j]>pivot){
            j--;
        }
        if(i<j){
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[j], arr[low]);
    return j;
}

void quickSort(int arr[], int low, int high){
    if(low<high){
        int pivotIndex = partition(arr, low, high);
        quickSort(arr, low, pivotIndex-1);
        quickSort(arr, pivotIndex+1, high);
    }
}

int main() {
    int size;
    cout<<"Enter size of the array : ";
    cin>>size;
    int arr[size];
    cout<<"Enter elements : ";
    for(int i=0;i<size;i++){
        cin>>arr[i];
    }
    quickSort(arr, 0, size-1);
    for (int i = 0; i < size; i++) {
        cout << arr[i] << " ";
    }
    return 0;
}




//prims
#include <iostream>
#include <queue>

using namespace std;

const int INF =99999;

struct Edge {
    int src, dest, weight;
};

typedef pair<int, int> iPair;

void printMST(Edge mst[], int edgeCount) {
    int totalWeight = 0;
    cout << "Minimum Spanning Tree (MST) edges:" << endl;
    for (int i = 0; i < edgeCount; ++i) {
        cout << "(" << mst[i].src << ", " << mst[i].dest << ") with weight " << mst[i].weight << endl;
        totalWeight += mst[i].weight;
    }
    cout << "Total weight of MST: " << totalWeight << endl;
}

void prims(int graph[][100], int V) {
    priority_queue<iPair, vector<iPair>, greater<iPair>> pq;
    int key[100];
    int parent[100];
    bool inMST[100];
    
    // Initialize arrays
    for (int i = 0; i < V; ++i) {
        key[i] = INT16_MAX;
        parent[i] = -1;
        inMST[i] = false;
    }

    int src = 0;
    pq.push(make_pair(0, src));
    key[src] = 0;

    Edge mst[100]; // Store the MST edges here
    int edgeCount = 0;

    while (!pq.empty()) {
        int u = pq.top().second;
        pq.pop();

        inMST[u] = true;

        for (int v = 0; v < V; ++v) {
            int weight = graph[u][v];
            if (weight != INF && !inMST[v] && key[v] > weight) {
                key[v] = weight;
                pq.push(make_pair(key[v], v));
                parent[v] = u;
            }
        }
    }

    for (int i = 1; i < V; ++i) {
        if (parent[i] != -1) {
            mst[edgeCount++] = {parent[i], i, key[i]};
            cout << "Edge added to MST: (" << parent[i] << ", " << i << ") with weight " << key[i] << endl;
        }
    }

    printMST(mst, edgeCount);
}

int main() {
    int V, E;
    cout << "Enter the number of vertices: ";
    cin >> V;
    cout << "Enter the number of edges: ";
    cin >> E;

    int graph[100][100];
    for (int i = 0; i < V; ++i) {
        for (int j = 0; j < V; ++j) {
            graph[i][j] = INF;
        }
    }

    cout << "Enter the edges (src dest weight):" << endl;
    for (int i = 0; i < E; i++) {
        int u, v, weight;
        cin >> u >> v >> weight;
        graph[u][v] = weight;
        graph[v][u] = weight; // Since the graph is undirected
    }

    // Perform Prim's algorithm
    prims(graph, V);

    return 0;
}


//Kruskal
#include <iostream>
#include <algorithm>
using namespace std;

const int MAX = 1e4 + 5; 
int parent[MAX]; // Array for union-find (DSU)

struct Edge {
    int x, y;
    long long weight;
};

// Comparator function to sort edges by weight
bool compareEdges(Edge a, Edge b) {
    return a.weight < b.weight;
}

Edge edges[MAX]; // Array of edges
int nodes, edgeCount;

// Find the root of the node with path compression
int find(int x) {
    if (parent[x] != x)
        parent[x] = find(parent[x]);
    return parent[x];
}

// Union of two subsets
void unionSets(int x, int y) {
    int rootX = find(x);
    int rootY = find(y);
    if (rootX != rootY)
        parent[rootX] = rootY;
}

// Kruskal's algorithm to find the Minimum Spanning Tree (MST) cost
long long kruskalMST() {
    sort(edges, edges + edgeCount, compareEdges); // Sort edges by weight
    long long minimumCost = 0;

    for (int i = 0; i < edgeCount; ++i) {
        int x = edges[i].x;
        int y = edges[i].y;
        long long weight = edges[i].weight;

        if (find(x) != find(y)) { // If x and y are in different components
            minimumCost += weight;
            unionSets(x, y);
        }
    }
    return minimumCost;
}

int main() {
    cout << "Enter number of nodes and edges: ";
    cin >> nodes >> edgeCount;

    // Initialize the DSU
    for (int i = 0; i < nodes; ++i)
        parent[i] = i;

    cout << "Enter each edge (x, y, weight):\n";
    for (int i = 0; i < edgeCount; ++i) {
        cin >> edges[i].x >> edges[i].y >> edges[i].weight;
    }

    long long minimumCost = kruskalMST();
    cout << "Minimum cost of the spanning tree: " << minimumCost << endl;
    return 0;
}


//dikstras
#include <iostream>
#include <queue>
#include <limits>

using namespace std;

const int INF = numeric_limits<int>::max();
const int MAX_NODES = 100;

int dijkstra(int graph[MAX_NODES][MAX_NODES], int n, int start, int distances[MAX_NODES]) {
    bool visited[MAX_NODES] = {false};

    // Initialize all distances to infinity, except the start node
    for (int i = 0; i < n; i++) {
        distances[i] = INF;
    }
    distances[start] = 0;

    // Min-heap priority queue
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    pq.push({0, start});

    while (!pq.empty()) {
        int dist = pq.top().first;
        int u = pq.top().second;
        pq.pop();

        // If this node was already visited, skip it
        if (visited[u]) continue;
        visited[u] = true;

        // Update the distance to each neighbor v
        for (int v = 0; v < n; v++) {
            if (graph[u][v] != INF && distances[u] + graph[u][v] < distances[v]) {
                distances[v] = distances[u] + graph[u][v];
                pq.push({distances[v], v});
            }
        }
    }

    return 0;
}

int main() {
    int n, m;
    cout << "Enter the number of vertices and edges: ";
    cin >> n >> m;

    int graph[MAX_NODES][MAX_NODES];

    // Initialize graph with INF for no connection and 0 for self-loops
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            graph[i][j] = (i == j) ? 0 : INF;
        }
    }

    cout << "Enter the edges (u, v, weight) one by one:\n";
    for (int i = 0; i < m; ++i) {
        int u, v, weight;
        cin >> u >> v >> weight;
        graph[u][v] = weight;
        graph[v][u] = weight;  // For undirected graph
    }

    int start;
    cout << "Enter the starting vertex: ";
    cin >> start;

    int distances[MAX_NODES];
    dijkstra(graph, n, start, distances);

    cout << "Shortest distances from vertex " << start << ":\n";
    for (int i = 0; i < n; ++i) {
        cout << "Vertex " << i << ": " << (distances[i] == INF ? "INF" : to_string(distances[i])) << endl;
    }

    return 0;
}




//Floyd
#include <iostream>
#define INF 99999
using namespace std;

void printSolution(int dist[][100], int V) {
    cout << "The shortest distances between every pair of vertices:\n";
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            if (dist[i][j] == INF)
                cout << "INF\t";
            else
                cout << dist[i][j] << "\t";
        }
        cout << endl;
    }
}

void floydWarshall(int graph[][100], int V) {
    int dist[100][100];

    // Initialize dist array with the initial graph distances
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            dist[i][j] = graph[i][j];
        }
    }

    // Update the shortest distances using intermediate vertices
    for (int k = 0; k < V; k++) {
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                if (dist[i][k] != INF && dist[k][j] != INF && dist[i][k] + dist[k][j] < dist[i][j])
                    dist[i][j] = dist[i][k] + dist[k][j];
            }
        }
    }

    // Print the shortest distance matrix
    printSolution(dist, V);
}

int main() {
    int V, E;
    cout << "Enter the number of vertices: ";
    cin >> V;

    // Initialize graph with INF (no direct paths)
    int graph[100][100];
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            graph[i][j] = (i == j) ? 0 : INF;  // Distance to itself is 0, else INF
        }
    }

    cout << "Enter the number of edges: ";
    cin >> E;
    cout << "Enter each edge as: start_vertex end_vertex distance\n";
    for (int i = 0; i < E; i++) {
        int u, v, weight;
        cout << "Edge " << i + 1 << ": ";
        cin >> u >> v >> weight;
        graph[u - 1][v - 1] = weight; // Adjusting for 0-based indexing
    }

    floydWarshall(graph, V);

    return 0;
}




//knapsack
#include <iostream>
#include <algorithm> // For sorting
using namespace std;

struct Item {
    int weight, profit;
};

const int MAX_ITEMS = 100; // Adjust this based on the expected maximum number of items
const int MAX_CAPACITY = 1000; // Adjust this based on the expected maximum knapsack capacity

int knapsack(int capacity, Item items[], int n) {
    int dp[MAX_ITEMS + 1][MAX_CAPACITY + 1] = {0}; // Initialize the dp table with zeros

    for (int i = 1; i <= n; ++i) {
        for (int w = 1; w <= capacity; ++w) {
            if (items[i - 1].weight <= w) {
                dp[i][w] = max(dp[i - 1][w], items[i - 1].profit + dp[i - 1][w - items[i - 1].weight]);
            } else {
                dp[i][w] = dp[i - 1][w];
            }
        }
    }

    int maxProfit = dp[n][capacity];

    cout << "\nDP Table:\n";
    for (int i = 0; i <= n; ++i) {
        for (int w = 0; w <= capacity; ++w) {
            cout << dp[i][w] << "\t";
        }
        cout << endl;
    }

    cout << "\nSelected items in the knapsack:\n";
    int w = capacity;
    for (int i = n; i > 0 && maxProfit > 0; --i)  {
        if (maxProfit != dp[i - 1][w]) {
            cout << "Item " << i << " (Profit: " << items[i - 1].profit << ", Weight: " << items[i - 1].weight << ")\n";
            maxProfit -= items[i - 1].profit;
            w -= items[i - 1].weight;
        }
    }

    return dp[n][capacity];
}

int main() {
    int n, capacity;

    cout << "Enter the number of items: ";
    cin >> n;

    Item items[MAX_ITEMS];
    cout << "Enter the weight and profit of each item:\n";
    for (int i = 0; i < n; ++i) {
        cin >> items[i].weight >> items[i].profit;
    }

    sort(items, items + n, [](const Item& a, const Item& b) {
        return a.weight < b.weight;
    });

    cout << "Enter the maximum capacity of the knapsack: ";
    cin >> capacity;

    int maxProfit = knapsack(capacity, items, n);
    cout << "\nMaximum profit for the knapsack = " << maxProfit << endl;

    return 0;
}




//fractional knapsack
#include <iostream>
#include <algorithm>
using namespace std;

// Structure to store profit and weight of each item
struct Item {
    int profit, weight;
};

// Function to calculate the maximum profit for the Fractional Knapsack problem
double fractionalKnapsack(int W, Item items[], int n) {
    // Sort items based on profit/weight ratio in descending order
    sort(items, items + n, [](Item a, Item b) {
        return (double)a.profit / a.weight > (double)b.profit / b.weight;
    });

    double totalProfit = 0.0;

    for (int i = 0; i < n; i++) {
        // If item can be added fully
        if (items[i].weight <= W) {
            W -= items[i].weight;
            totalProfit += items[i].profit;
        }
        // If only part of the item can be added
        else {
            totalProfit += items[i].profit * ((double)W / items[i].weight);
            break;
        }
    }

    return totalProfit;
}

int main() {
    int n, W;
    cout << "Enter the number of items: ";
    cin >> n;

    Item items[n];
    cout << "Enter weight and profit of each item:" << endl;
    for (int i = 0; i < n; i++) {
        cin >> items[i].weight >> items[i].profit;
    }

    cout << "Enter the maximum capacity of the knapsack: ";
    cin >> W;

    // Call the function and display the maximum profit
    double maxProfit = fractionalKnapsack(W, items, n);
    cout << "Maximum profit of the Knapsack = " << maxProfit << endl;

    return 0;
}




//optimal merge
#include <iostream>
#include <queue>

using namespace std;

// Function to display the current state of the min heap
void displayMinHeap(priority_queue<int, vector<int>, greater<int>>& minHeap) {
    // Copy elements to an array since we don't have vectors
    int temp[100];  // Assuming the maximum size we need is 100 for this example
    int count = 0;
    
    while (!minHeap.empty()) {
        temp[count++] = minHeap.top();
        minHeap.pop();
    }

    cout << "Current queue: ";
    for (int i = 0; i < count; i++) {
        cout << temp[i] << " ";
    }
    cout << endl;

    // Push elements back into the heap
    for (int i = 0; i < count; i++) {
        minHeap.push(temp[i]);
    }
}

// Function to calculate the optimal merge pattern
int optimalMergePattern(int files[], int fileCount) {
    priority_queue<int, vector<int>, greater<int>> minHeap;

    // Push all files into the min heap
    for (int i = 0; i < fileCount; i++) {
        minHeap.push(files[i]);
    }

    int totalCost = 0;

    // Perform the optimal merge process
    while (minHeap.size() > 1) {
        int first = minHeap.top();
        minHeap.pop();
        int second = minHeap.top();
        minHeap.pop();
        
        int mergedFile = first + second;
        totalCost += mergedFile;

        minHeap.push(mergedFile);
        displayMinHeap(minHeap);
    }

    return totalCost;
}

int main() {
    // Define files array instead of using a vector
    int files[] = {5, 3, 2, 8};
    int fileCount = sizeof(files) / sizeof(files[0]);

    int minimumCost = optimalMergePattern(files, fileCount);
    
    cout << "Minimum cost to merge files: " << minimumCost << endl;

    return 0;
}




//nqueens
#include <iostream>
using namespace std;

#define N 4 // Define the size of the board

// Function to print the solution (i.e., the chessboard)
void printSolution(int board[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++)
            cout << (board[i][j] ? "Q " : "_ ");
        cout << endl;
    }
    cout << endl;
}

// Function to check if placing a queen at board[row][col] is safe
bool isSafe(int board[N][N], int row, int col) {
    // Check this row on the left side
    for (int i = 0; i < col; i++)
        if (board[row][i])
            return false;

    // Check upper diagonal on the left side
    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--)
        if (board[i][j])
            return false;

    // Check lower diagonal on the left side
    for (int i = row, j = col; i < N && j >= 0; i++, j--)
        if (board[i][j])
            return false;

    return true;
}

// Backtracking function to solve the N Queens problem
bool solveNQUtil(int board[N][N], int col) {
    // If all queens are placed, print the solution
    if (col >= N) {
        printSolution(board);
        return false; // Continue searching for more solutions
    }

    // Try placing a queen in all rows in this column
    for (int i = 0; i < N; i++) {
        if (isSafe(board, i, col)) {
            board[i][col] = 1; // Place the queen

            // Recur to place the rest of the queens
            solveNQUtil(board, col + 1);

            // Backtrack if placing queen here leads to no solution
            board[i][col] = 0;
        }
    }

    return false; // If the queen cannot be placed in any row in this column
}

// Function to initialize the board and solve the problem
void solveNQ() {
    int board[N][N] = {0}; // Initialize an NxN board with all 0s

    solveNQUtil(board, 0); // Find and print all solutions
}

int main() {
    solveNQ();
    return 0;
}
